#ifndef BOOST_REAL_REAL_HPP
#define BOOST_REAL_REAL_HPP

#include <iostream>
#include <list>
#include <algorithm>
#include <initializer_list>
#include <utility>

#include <real/number.hpp>
#include <real/real_exception.hpp>

namespace boost {
    namespace real {
        class real {

            // Available operations
            enum class OP {ADDITION, SUBTRACT, NONE};

            // Explicit number definition
            std::list<int> _digits;

            // Number generated by algorithm
            number* _number_ptr = nullptr;

            // Composed number
            OP _operation = OP::NONE;
            real* _lhs_ptr = nullptr;
            real* _rhs_ptr = nullptr;

            // Precision to witch compare numbers, set by default in two.
            int _precision = 2;

            real(OP operation, const real& lhs, const real& rhs) {
                this->_lhs_ptr = new real(lhs);
                this->_rhs_ptr = new real(rhs);
                this->_operation = operation;
                this->_precision = std::max(lhs._precision, rhs._precision);
            };

            bool is_lower(const std::list<int>& lhs, std::list<int>& rhs) const {

                // Check if lhs is lower than rhs
                auto lhs_it = lhs.cbegin();
                auto rhs_it = rhs.cbegin();
                while (rhs_it != rhs.end() && lhs_it != lhs.end() && *lhs_it == *rhs_it) {
                    ++lhs_it;
                    ++rhs_it;
                }

                return rhs_it != rhs.end() && lhs_it != lhs.end() && *lhs_it < *rhs_it;
            }

            void copy_operands(const real& other) {
                if (other._lhs_ptr != nullptr) {
                    this->_lhs_ptr = new real(*other._lhs_ptr);
                }

                if (other._rhs_ptr != nullptr) {
                    this->_rhs_ptr = new real(*other._rhs_ptr);
                }
            }

        public:

            class iterator {
            private:
                std::list<int> lower_bound = {};
                std::list<int> upper_bound = {};
                int n = 0;
                int lower_integer_part = 0;
                int upper_integer_part = 0;

                real* real_ptr = nullptr;
                iterator* lhs_it_ptr = nullptr;
                iterator* rhs_it_ptr = nullptr;

                void align_numbers(std::list<int>& lhs, int& lhs_integers, std::list<int>& rhs, int& rhs_integers) const {
                    // This is to align numbers
                    while (lhs_integers < rhs_integers) {
                        lhs.push_front(0);
                        lhs_integers++;
                    }

                    while (rhs_integers < lhs_integers) {
                        lhs.push_front(0);
                        rhs_integers++;
                    }

                    while (lhs.size() < rhs.size()) {
                        lhs.push_back(0);
                    }

                    while (rhs.size() < lhs.size()) {
                        rhs.push_back(0);
                    }
                };

                int add_bounds(std::list<int> lhs, int lhs_integers, std::list<int> rhs, int rhs_integers, std::list<int>& result) const {
                    int carry = 0;
                    int digit;

                    this->align_numbers(lhs, lhs_integers, rhs, rhs_integers);

                    auto lhs_it = lhs.crbegin();
                    auto rhs_it = rhs.crbegin();

                    while(lhs_it != lhs.crend() and rhs_it != rhs.crend()) {

                        digit = carry + *lhs_it + *rhs_it;

                        if (digit > 9) {
                            carry = 1;
                            digit -= 10;
                        } else {
                            carry = 0;
                        }

                        result.push_front(digit);
                        ++lhs_it;
                        ++rhs_it;
                    }

                    if (carry == 1) {
                        result.push_front(1);
                        return rhs_integers + 1;
                    }

                    return rhs_integers;
                };

                /*
                 * Pre-condition: lhs >= rhs
                 */
                int subtract_bounds(std::list<int> lhs, int lhs_integers, std::list<int> rhs, int rhs_integers, std::list<int>& result) const {
                    int borrow = 0;

                    this->align_numbers(lhs, lhs_integers, rhs, rhs_integers);

                    auto lhs_it = lhs.rbegin();
                    auto rhs_it = rhs.rbegin();

                    while(lhs_it != lhs.rend() and rhs_it != rhs.rend()) {

                        if (*lhs_it < borrow) {
                            *lhs_it += (10 - borrow); // Borrow is always 0 or 1, then it is never greater than 10
                        } else {
                            *lhs_it -= borrow;
                            borrow = 0;
                        }

                        if (*lhs_it < *rhs_it) {
                            *lhs_it += 10;
                            borrow++;
                        }

                        result.push_front(*lhs_it - *rhs_it);
                        ++lhs_it;
                        ++rhs_it;
                    }


                    // Remove possible 0 prefix if more significant digits were canceled.
                    while (result.front() == 0 && lhs_integers > 0) {
                        result.pop_front();
                        --lhs_integers;
                    }

                    return lhs_integers;
                };

            public:
                iterator() = default;

                iterator(const iterator& other) = default;

                explicit iterator(real* ptr) : real_ptr(ptr) {
                    if (this->real_ptr->_operation != OP::NONE) {
                        this->lhs_it_ptr = new iterator(this->real_ptr->_lhs_ptr->begin());
                        this->rhs_it_ptr = new iterator(this->real_ptr->_rhs_ptr->begin());
                    } else {
                        this->lower_bound.push_back(0);
                        this->upper_bound.push_back(0);
                        this->lower_integer_part = 1;
                        this->upper_integer_part = 1;
                    }

                    ++(*this);
                }

                std::list<int>& get_lower_bound() { return this->lower_bound; }
                std::list<int>& get_upper_bound() { return this->upper_bound; }

                void operator++() {

                    // Single number iteration
                    // i.e. A number that is not a composition of two number related by an operator
                    if (this->real_ptr->_operation == OP::NONE) {
                        this->n++;

                        if (this->n > (int)this->real_ptr->_digits.size()) {
                            this->lower_bound.push_back(0);
                            this->upper_bound.push_back(0);
                            return;
                        }

                        this->upper_bound.clear();
                        this->lower_bound.push_back(this->real_ptr->get_nth_digit(this->n));

                        if (this->n == (int)this->real_ptr->_digits.size()) {
                            for (auto& d : this->lower_bound) {
                                this->upper_bound.push_back(d);
                            }

                            return;
                        }

                        int carry = 1;
                        for (auto it = this->lower_bound.rbegin(); it != lower_bound.rend(); ++it) {
                            if (*it + carry == 10) {
                                this->upper_bound.push_front(0);
                            } else {
                                this->upper_bound.push_front(*it + carry);
                                carry = 0;
                            }
                        }

                        if (carry > 0) {
                            this->upper_bound.push_front(carry);
                            this->upper_integer_part = this->lower_integer_part + 1;
                        }

                        return;
                    }

                    // Composed number iteration
                    // i.e. a number that is an operation between two real numbers
                    this->lower_bound.clear();
                    this->upper_bound.clear();

                    ++(*this->lhs_it_ptr);
                    ++(*this->rhs_it_ptr);

                    // TODO: This is only considering addition and subtraction between positive numbers.
                    // TODO: The subtraction assumes lhs >= rhs, otherwise fails.
                    // TODO: positive-negative leq and geq number combination must be considered to get correct result for all the cases.
                    if (this->real_ptr->_operation == OP::ADDITION) {
                        this->lower_integer_part = this->add_bounds((*this->lhs_it_ptr).get_lower_bound(), (*this->lhs_it_ptr).lower_integer_part, (*this->rhs_it_ptr).get_lower_bound(), (*this->rhs_it_ptr).lower_integer_part, this->lower_bound);
                        this->upper_integer_part = this->add_bounds((*this->lhs_it_ptr).get_upper_bound(), (*this->lhs_it_ptr).upper_integer_part, (*this->rhs_it_ptr).get_upper_bound(), (*this->rhs_it_ptr).upper_integer_part, this->upper_bound);
                    } else if (this->real_ptr->_operation == OP::SUBTRACT) {
                        this->lower_integer_part = this->subtract_bounds((*this->lhs_it_ptr).get_lower_bound(), (*this->lhs_it_ptr).lower_integer_part, (*this->rhs_it_ptr).get_upper_bound(), (*this->rhs_it_ptr).lower_integer_part, this->lower_bound);
                        this->upper_integer_part = this->subtract_bounds((*this->lhs_it_ptr).get_upper_bound(), (*this->lhs_it_ptr).upper_integer_part, (*this->rhs_it_ptr).get_lower_bound(), (*this->rhs_it_ptr).upper_integer_part, this->upper_bound);
                    }
                }

                void print() {
                    std::cout << '[';
                    int before_dot = this->lower_integer_part;
                    for (auto& d : this->lower_bound) {
                        std::cout << d;
                        before_dot--;
                        if (before_dot == 0) std::cout << '.';
                    }

                    std::cout << ", ";

                    before_dot = this->upper_integer_part;
                    for (auto& d : this->upper_bound) {
                        std::cout << d;
                        before_dot--;
                        if (before_dot == 0) std::cout << '.';
                    }

                    std::cout << ']';
                }
            };

            real() = default;

            real(const real& other)  :
                    _digits(other._digits),
                    _number_ptr(other._number_ptr),
                    _operation(other._operation),
                    _precision(other._precision) { this->copy_operands(other); };

            real(std::initializer_list<int> l) {
                this->_digits = l;
                this->_precision = (int)this->_digits.size() + 1;
            };

            ~real() {
                delete this->_number_ptr;
                this->_number_ptr = nullptr;

                delete this->_lhs_ptr;
                this->_lhs_ptr = nullptr;

                delete this->_rhs_ptr;
                this->_rhs_ptr = nullptr;
            }

            /*
             * Returns the nth digit of a base case number (i.e. a number that is not a composition of
             * multiple numbers operations)
             *
             * Requires: this->_operation == OP::NONE
             */
            int get_nth_digit(int n) const {

                if (this->_number_ptr != nullptr) {
                    return this->_number_ptr->get_nth_digit(n);
                }

                if (n > (int)this->_digits.size()) {
                    return 0;
                }

                auto it = this->_digits.cbegin();
                for (int i = 1; i < n; i++) { it++; }

                return *it;
            };

            template <typename NUMBER, typename... Args>
            void add_number(Args&&... args) {
                this->_number_ptr = new NUMBER(std::forward<Args>(args)...);
            }

            void print(int precision) {
                auto it = this->begin();
                for (int i = 1; i <= precision; i++) { ++it; }
                it.print();
            }

            iterator begin() { return iterator(this); }

            real operator+(const real& other) const {
                return real(real::OP::ADDITION, *this, other);
            }

            real operator-(const real& other) const {
                return real(real::OP::SUBTRACT, *this, other);
            }

            real& operator=(const real& other) {
                this->_digits = other._digits;
                this->_number_ptr = other._number_ptr;
                this->_operation = other._operation;
                this->_precision = other._precision;
                this->copy_operands(other);
                return *this;
            };

            //TODO: make this const for operands, the problem is that iterators should be const
            bool operator<(real& other) {
                auto this_it = this->begin();
                auto other_it = other.begin();


                int current_precision = std::max(this->_precision, other._precision);
                for (int p = 0; p < current_precision; ++p) {
                    // Get more precision
                    ++this_it;
                    ++other_it;

                    if (this->is_lower(this_it.get_upper_bound(), other_it.get_lower_bound())) {
                        return true;
                    }

                    if (this->is_lower(other_it.get_upper_bound(), this_it.get_lower_bound())) {
                        return false;
                    }
                }

                // If after the precision is reached, the number ranges still overlap, then we cannot
                // know if they are equals or other es less than this and we throw an error.
                throw boost::real::precision_exception();
            }
        };
    }
}

#endif //BOOST_REAL_REAL_HPP
